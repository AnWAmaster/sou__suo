原题链接：
https://vjudge.net/contest/438445#problem/E

题目：
小明给你两个容器，分别能装下A升水和B升水，并且可以进行以下操作
FILL(i)        将第i个容器从水龙头里装满(1 ≤ i ≤ 2);
DROP(i)        将第i个容器抽干
POUR(i,j)      将第i个容器里的水倒入第j个容器（这次操作结束后产生两种结果，一是第j个容器倒满并且第i个容器依旧有剩余，二是第i个容器里的水全部倒入j中，第i个容器为空）
现在要求你写一个程序，来找出能使其中任何一个容器里的水恰好有C升，找出最少操作数并给出操作过程

思路：
对于每种状态都进行三种操作并将得到的合法状态存起来
即BFS
可以通过保存已出现过的两瓶水的容量实现剪枝
但是要注意a b和b a不能算同一种状态!!!
可以将几种操作写成几个函数来简化代码
然后也没啥好说的了


AC代码
#include<iostream>
#include<queue>
using namespace std;

string str[7]={" ","FILL(1)","FILL(2)","DROP(1)","DROP(2)","POUR(1,2)","POUR(2,1)"};//这么写简化代码

bool book[101][101]; 
struct Node{
	string opt;
	int prea,preb;
}; 

int a,b,c;
int A,B,C;

void Fill(int &temp,char ch)
{
	if(ch=='A'){
		temp=A;
	}
	else{
		temp=B;
	}
}

void Drop(int &temp)
{
	temp=0;
}

bool check(int a,int b,int c)
{
	if(a==c||b==c){
		return true;
	}
	return false;
}


void bfs()
{
	Node pre;
	pre.opt="";
	pre.prea=0,pre.preb=0;
	book[a][b]=true;
	queue<Node>q;
	q.push(pre);
	while(q.size())
	{
		pre=q.front();
		q.pop();
		for(int i=1;i<=6;i++)
		{
			int tempa=pre.prea,tempb=pre.preb;
			if(i==1)
			{
				Fill(tempa,'A');
			}
			else if(i==2)
			{
				Fill(tempb,'B');
			}
			else if(i==3)
			{
				Drop(tempa);
			}
			else if(i==4)
			{
				Drop(tempb);
			}
			else if(i==5)//1倒进2 
			{
				int rest=B-tempb;
				if(tempa>=rest)
				{
					tempb=B;
					tempa-=rest;
				}
				else
				{
					tempb+=tempa;
					tempa=0;
				}
			}
			else if(i==6)//2倒进1
			{
				int rest=A-tempa;
				if(tempb>=rest)
				{
					tempa=A;
					tempb-=rest;
				}
				else
				{
					tempa+=tempb;
					tempb=0;
				}
			}
			if(book[tempa][tempb])continue;
			Node temp;
			temp.opt=pre.opt+char(i+'0');
			if(check(tempa,tempb,C))
			{
				cout<<temp.opt.length()<<endl;	
				for(int i=0;i<temp.opt.length();i++)
				{
					cout<<str[temp.opt[i]-'0']<<endl;
				}		
				return;
			}
			book[tempa][tempb]=true;
			temp.prea=tempa,temp.preb=tempb;
			q.push(temp);
		}
	}
	cout<<"impossible"<<endl;
}

int main()
{
	cin>>A>>B>>C;
	bfs();
}
