原题链接：
https://vjudge.net/contest/438445#problem/G

题目大意：
给出一个N*M的迷宫，有三种地形为平地、墙、KFC
给出了两个人，他们要在KFC碰面，所以这个KFC必须是同一个KFC
会有多个KFC，求他们碰面所花费的时间的最小值
题目保证能碰面

思路：
因为以前做过类似的题，所以一下子就有想法了
如果只用一个bfs的话，要开多个数组记录两个人分别的走过区域的标记、到达各个位置的步数，因为两个人都会对图产生干扰
而且还要判断是谁走到了这里，越写越乱，干脆转换思路，bfs两次。
这样子两个人就不会互相产生影响了
双bfs的话，只需要多开一个记录步数的数组即可
因为这里不能用修改迷宫地形来防止往回走了，所以用步数是否为-1判断此地是否已走过

AC代码
#include<iostream>
#include<queue>
using namespace std;
#define maxn 201

int R,C,MIN;
int nex[4][2]={0,1,0,-1,1,0,-1,0};
string mp[maxn];
int st1[maxn][maxn],st2[maxn][maxn];

struct Node{
	int r,c;
}p1,p2,temp,pre;

void bfs1()
{
	queue<Node>q;
	q.push(p1);
	while(q.size())
	{
		pre=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int tempr=pre.r+nex[i][0];
			int tempc=pre.c+nex[i][1];
			if(tempr<0||tempc<0||tempr>R-1||tempc>C-1)continue;
			if(mp[tempr][tempc]=='#'||st1[tempr][tempc]!=-1)continue;
			st1[tempr][tempc]=st1[pre.r][pre.c]+1;
			temp.r=tempr,temp.c=tempc;
			q.push(temp);
		}
	}
}

void bfs2()
{
	queue<Node>q;
	q.push(p2);
	while(q.size())
	{
		pre=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int tempr=pre.r+nex[i][0];
			int tempc=pre.c+nex[i][1];
			if(tempr<0||tempc<0||tempr>R-1||tempc>C-1)continue;
			if(mp[tempr][tempc]=='#'||st2[tempr][tempc]!=-1)continue;
			st2[tempr][tempc]=st2[pre.r][pre.c]+1;
			if(mp[tempr][tempc]=='@')
			{
				MIN=min(st1[tempr][tempc]+st2[tempr][tempc],MIN);
			}
			temp.r=tempr,temp.c=tempc;
			q.push(temp);
		}
	}
}

int main()
{
	while(cin>>R>>C)
	{
		for(int r=0;r<R;r++)
		{
			cin>>mp[r];
		}
		for(int r=0;r<R;r++)
		{
			for(int c=0;c<C;c++)
			{
				st1[r][c]=st2[r][c]=-1;
				if(mp[r][c]=='Y')
				{
					p1.r=r,p1.c=c;
					st1[r][c]=st2[r][c]=0;
				}
				if(mp[r][c]=='M')
				{
					p2.r=r,p2.c=c;
					st1[r][c]=st2[r][c]=0;
				}
			}
		}
		MIN=10000000;
		bfs1();
		bfs2();
		cout<<MIN*11<<endl;
	}
}
