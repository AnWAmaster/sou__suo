原题链接：
https://vjudge.net/contest/438445#problem/O

题目大意：
给定一个两层的二维迷宫
迷宫中有平地、墙、传送门三种地形
在当前层内只可以前后左右移动，每走一步耗时一分钟
当前层的传送门可以使人传到另一层的相同坐标，且不花费时间但是如果落地遇到墙就走不通
给出起点和终点还有限定时间，要求能否在限定时间内到达终点

思路：
第一反应就是用BFS
基本走迷宫的操作就跳过了，说说本题的特点
1、有规定时间
对于时间，用个数组存每个坐标的时间即可，当当前坐标的上一个坐标已经到达规定时间时，当前坐标直接废弃不用
2、传送门
传送门是本题大坑
落地撞墙比较容易预料到并解决（毕竟题目都说了），判断一下落地的地形再进行q.push()操作即可
但是还有一种情况，当两层的相同位都为传送门时，因为无限传送无意义，认为这两个位置都是墙即可

感觉解释还是要和代码一起走好些，于是部分解释就放代码注释里了
(最下面有测试数据(从别人博客那弄过来的))

AC代码
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;

int C,R,time;

char mp[3][11][11];//存图 
int nex[4][2]={0,1,0,-1,1,0,-1,0}; 
int st[3][11][11];//step，存时间 

struct Node{
	int l,r,c;
};

bool bfs()
{
	queue<Node>q;
	Node pre,temp;
	pre.l=pre.c=pre.r=0;
	q.push(pre);
	mp[pre.l][pre.r][pre.c]='*';//修改迷宫比用book数组好些 
	while(q.size())
	{
		pre=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int tempr=pre.r+nex[i][0];
			int tempc=pre.c+nex[i][1]; 
			int templ=pre.l;
			if(tempr<0||tempc<0||tempr>R-1||tempc>C-1)continue;//越界肯定是要首先判断的 
			if(st[pre.l][pre.r][pre.c]>=time)continue;//当前坐标的前一个坐标已超时，直接弃用当前坐标 
			if(mp[templ][tempr][tempc]=='#')//传送门 
			{
				mp[templ][tempr][tempc]='*';//修改为墙 
				//进入另一层 
				if(templ==0)
				{
					templ=1;
				}
				else if(templ==1)
				{
					templ=0;
				}
			}
			if(mp[templ][tempr][tempc]=='#')//如果另一层的该位置是传送门
			{
				mp[templ][tempr][tempc]='*';//修改为墙 
			}
			if(mp[templ][tempr][tempc]=='*')continue;//把所有为墙的情况全部排除 
			if(mp[templ][tempr][tempc]=='P')//到达终点 
			{
				return true;
			} 
			temp.l=templ,temp.r=tempr,temp.c=tempc;
			mp[templ][tempr][tempc]='*';
			st[templ][tempr][tempc]=st[pre.l][pre.r][pre.c]+1;//耗时+1 
			q.push(temp);
		}
	}
	return false;//最终未到达 
}

int main()
{
	int T;
	cin>>T;
	for(int t=1;t<=T;t++)
	{
		cin>>R>>C>>time;
		memset(st,0,sizeof st);
		for(int i=0;i<2;i++)
		{
			for(int j=0;j<R;j++)
			{
				for(int k=0;k<C;k++)
				{
					cin>>mp[i][j][k];
				}
			} 
		}
		bool flag=bfs();
		if(flag)
		{
			cout<<"YES";
		}
		else
		{
			cout<<"NO";
		}
		cout<<endl;
	}
}


测试数据(*^▽^*)
输入
14
5 5 14
S*#*.
.#...
.....
****.
...#.
 
..*.P
#.*..
***..
...*.
*.#..
 
5 5 13
S*#*.
##...
.....
****.
...#.
 
..*.P
..*..
***..
...*.
*.#..
 
 
5 5 10
S*#*.
.#...
....#
****.
...#.
 
..*.P
#.*.*
***..
...*.
*.#..
 
1 2 10
SP
 
*.
 
1 3 2
S#P
 
..#
 
 
3 3 11
S..
*#.
#..
 
...
.#.
.*P
 
 
 
 
5 5 11
S*#*.
.#...
.....
****.
P.*#.
 
..*..
#.*..
***..
...*.
*#.#.
 
5 5 12
S*#*.
.#...
.....
****.
P.*#.
 
..*..
#.*..
***..
...*.
*#.#.
 
5 5 12
S*#*.
.#...
.....
****.
P.*#.
 
..*..
#.*..
***..
...*.
*.##.
 
5 5 3
S*#*.
.#...
.....
****.
..*#.
 
.P*..
#.*..
***..
...*.
*#.#.
 
5 5 9
S*#*.
.#...
.....
****.
..*#.
 
..*..
#.*..
***..
...*.
*#.P.
 
4 5 7
S*#*.
...**
.#.**
****.
 
.*.*.
.#*..
#.#..
.#.*P
 
5 7 12
S*****P
.#.*#*.
**.#.*.
.*****.
.......
 
*******
*.#*...
***.#*#
*******
*******
 
3 3 3
S#P
.*.
...
 
.##
...
...

输出
YES
NO
YES
YES
YES
NO
NO
NO
NO
YES
YES
NO
YES
NO


